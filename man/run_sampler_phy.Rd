% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/run_sampler_tree.R
\name{run_sampler_phy}
\alias{run_sampler_phy}
\title{Aggregated and overdispersed sampling for phylo objects}
\usage{
run_sampler_phy(x, n, alpha, dist.func = cophenetic, n_start = 1,
  return_start = FALSE, starting = NULL)
}
\arguments{
\item{x}{\code{phylo} object.}

\item{n}{A positive integer number indicating the sample size.}

\item{alpha}{Number indicating the strenght of aggregation (if negative) or
overdispersion (if positive). When alpha = 0 sample is random.}

\item{dist.func}{Function to calculate the phylogenetic distance.
The function should be able to receive a phylo object and return
a \code{matrix} indicating the pairwise distance
between tips. Row and column names should be given.
Default uses \code{cophenetic} from \code{ape} package.
Other examples include}

\item{n_start}{Number of initial selected tips. Default is one starting tip.}

\item{return_start}{if \code{TRUE} the starting tip is returned.}

\item{starting}{Character vector indicating the starting tips. If not provided,
random starting value(s) is(are) selected.}
}
\value{
The function returns a prunned phylogenetic tree.
}
\description{
Generate aggregated or overdispersed sampling designs
for any given phylogenetic tree (class phylo). Results can
be used to design experiments/samples, for resample proposes and data bias removal.
}
\details{
\code{run_sampler} resample \code{n} sample tips with an attraction
or repulsive effect determined by \code{alpha} (\code{x}).
The algorithim begins selecting one random starting tip \code{i}.
The following tip is then selected based on the a probability given
by the distance of \code{i} to each remaing tip raised to the power of
\code{alpha} (pr(j | i) = dij ^ alpha). The following selections will then use
the average distance of the remaing tips to the selected ones. The procedure
is repeated until the selected tips reach \code{n}. Positive values of
\code{alpha} generate overdispersed sample designs, as tips within higher distant from
the selected tip(s) will have a higher probability of being selected. Inverselly,
negative values will generate an aggregated design. Note that as \code{alpha}
approximate the infinity (+ or -), the sample design becomes more deterministic.
}
\examples{
# Generate a random tree
require(ape)
set.seed(100)
tree <- rcoal(10)
set.seed(2)
# Highly overdispersed 50\% resample design (alpha = 100)
overdispersed <- run_sampler_phy(tree, 5, alpha = 100, starting = "t10")
# Highly aggregated 50\% resample design (alpha = -100)
aggregated <- run_sampler_phy(tree, 5, alpha = -100, starting = "t10")
# Random 50\% resample design (alpha = 0)
random <- run_sampler_phy(tree, 5, alpha = 0, starting = "t10")
# Plot to compare
par(mfrow = c(2, 2))
plot(tree, main = "Full tree", cex = 1)
axis(1)
plot(overdispersed, main = "Overdispersed 50\% sampling", cex = 1)
axis(1)
plot(aggregated, main = "Aggregated 50\% sampling", cex = 1)
axis(1)
plot(random, main = "Random 50\% sampling", cex = 1)
axis(1)
}
\author{
Bruno Vilela
}
