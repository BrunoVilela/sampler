% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/run_sampler.R
\name{run_sampler}
\alias{run_sampler}
\title{Aggregated and overdispersed sampling}
\usage{
run_sampler(x, n, alpha)
}
\arguments{
\item{x}{\code{matrix} indicating the distance (any unit) between sample units.
Row and column names should be given.}

\item{n}{A positive integer number indicating the sample size.}

\item{alpha}{Number indicating the strenght of aggregation (if negative) or
overdispersion (if positive). When alpha = 0 sample is random.}
}
\description{
Generate aggregated or overdispersed sampling designs
for any given distance matrix (class matrix). Results can
be used to design experiments/samples, for resample proposes and data bias removal
}
\details{
\code{run_sampler} resample \code{n} sample units with an attraction
or repulsive effect determined by \code{alpha} and given a disatance matrix
(\code{x}). The algorithim begins selecting one random starting point \code{i}.
The following sample unit is then selected based on the a probability given
by the distance of \code{i} to each remaing units raised to the power of
\code{alpha} (pr(j | i) = dij ^ alpha). The following selections will then use
the average distance of the remaing units to the selected ones. The procedure
is repeated until the selected points reach \code{n}. Positive values of
\code{alpha} generate overdispersed sample designs, as sample units disntant from
the selected unit(s) will have a higher probability of being selected. Inverselly,
negative values will generate an aggregated design. Note that as \code{alpha}
approximate the infinity (+ or -), the sample design becomes more deterministic.
}
\examples{
# Generate a random tree
require(ape)
set.seed(2)
tree <- rcoal(10)
# Calculate the distance
dist <- cophenetic(tree)
# Highly overdispersed 50\% resample design (alpha = 100)
selection <- run_sampler(x = dist, n = 5, alpha = 1000)
# Prune tree
overdispersed <- drop.tip(tree, tree$tip.label[!tree$tip.label \%in\% selection])
# Plot to compare
par(mfrow = c(1, 2))
plot(tree)
plot(overdispersed)

}
\author{
Bruno Vilela
}
